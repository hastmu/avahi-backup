@startuml 

box "Client"
   participant "avahi-backup.client" as client
   participant "local Storage" as local.storage
end box

box "Network"
   participant "LAN" as lan
   participant "AVAHI" as avahi.announcement
end box

box "Server"
   participant "avahi-backup.backup" as backup
   participant "Backup-Target" as backup.storage 
end box

== Setup ==

backup -> backup.storage: Mark as backup-rooot

note left of backup.storage

./avahi-backup init-backup-root

... marks the current directory as root 
of backups (currently it has to be a zfs based setup)

end note

backup -> client: shares ssh keys for root access

note left of backup
./avahi-backup setup <client> [alternative primary logon-account see 1)]

1) if root only works with public keys, therefore a intermediary account is needed.

e.g.
./avahi-backup setup 192.168.0.34 user1
will ssh user1@192.168.0.34 sudo cat >> /root/.ssh/authorized_keys

2) if direct root login is enabled
./avahi-backup setup 192.168.0.34
will ssh-copy-id root@192.168.0.34 cat >> /root/.ssh/authorized_keys

end note

== Client start ==

client -> local.storage: scans for /home/*/.backup if found registers
client -> local.storage: reads /etc/backup.d/*.conf and registers
client -> avahi.announcement: Default register /etc /root + found ones

== Backup Cycle ==

backup -> avahi.announcement: reads service announcements from network
backup -> client: rsyncs or zfs send announced sources to server
client -> backup.storage: copy backup (full or incremental)

@enduml

