@startuml 

box "Client"
   participant "avahi-backup.client" as client
   participant "local Storage" as local.storage
end box

box "Network"
   participant "LAN" as lan
   participant "AVAHI" as avahi.announcement
end box

box "Server"
   participant "avahi-backup.backup" as backup
   participant "Backup-Target" as backup.storage
   participant "Restore-Rsync-Server" as backup.restore
end box

== Setup ==

backup -> backup.storage: Mark as backup-rooot

note left of backup.storage

./avahi-backup init-backup-root

... marks the current directory as root 
of backups (currently it has to be a zfs based setup)

end note

backup -> client: shares ssh keys for root access

note left of backup
./avahi-backup setup <client> [alternative primary logon-account see 1)]

1) if root only works with public keys, therefore a intermediary account is needed.

e.g.
./avahi-backup setup 192.168.0.34 user1
will ssh user1@192.168.0.34 sudo cat >> /root/.ssh/authorized_keys

2) if direct root login is enabled
./avahi-backup setup 192.168.0.34
will ssh-copy-id root@192.168.0.34 cat >> /root/.ssh/authorized_keys

end note

== Client start ==

client -> local.storage: scans for /home/*/.backup if found registers
client -> local.storage: reads /etc/avahi-backup.d/*.conf and registers
client -> avahi.announcement: Default register /etc /root + found ones

== Backup Cycle ==

backup -> avahi.announcement: reads service announcements from network
backup -[#Grey]-> client: WIP: updates .backup with credentials for the restore-rsync share
backup -> client: trigger backups of announced backup-types

group Backup-Types

else

group#LightYellow #LightBlue Path (rsync)
else Pre-Flight Check

backup -> client: check if rsync is available
backup -> client: check if source to be backuped is available
backup -> client: check if there are sshfs mount inside the source tree if so exclude them

else Backup

backup -> client: rsync as defined with static bwlimit of 40MB/s

else Summary

note right of backup
SUMMARY # S.PATH: was used.
TBU
end note

end group

else 

group#LightYellow #LightBlue ZFS
else Pre-Flight Check

backup -> client: check if zfs is available
backup -> client: check if zfs volume is available
backup -> client: check if zfs source volume is encrypted or not

backup -> backup: check if there is a resume-token for the zfs target volume?
backup -> backup: check if this is a full or incremental update?

else Backup

group States

else #LightYellow zfs-resume

backup -> client: start 60s zfs send with resume-token (so every run this gets more complete)

else #LightYellow zfs-full-unenc

backup -> client: start 60s zfs send for a full unencrypted setup (ends up in resume-token)

else #LightYellow zfs-full-enc

backup -> client: start 60s zfs send for a full encrypted setup (ends up in resume-token)

else #LightYellow zfs-inc-unenc

backup -> client: start 60s zfs send for a incremental unencrypted setup (ends up in resume-token)

else #LightYellow zfs-inc-enc

backup -> client: start 60s zfs send for a incremental encrypted setup (ends up in resume-token)

end group

else Summary

note right of backup
SUMMARY # S.PVELXC: skipped[6] (stop_hour)
SUMMARY # S.PVELXC: hash up-to-date[10] updating[0]
TBU
end note



end group


else 

group#LightYellow #LightBlue PVE-LXC
else Pre-Flight Check

backup -> backup: if there is a chain of ids split them into individual items with same properties

group stop_hours

backup -> backup: check if we are in the stop_hour (the time a shutdown is acceptable, e.g. 5am)

else #LightGreen true

backup -> client: check if lxc id is available
backup -> client: check if lxc id is running, there for shutdown is triggered

else #Orange false

backup -> backup: spend 30s to update hash of last backups volumes. (so every run will complete that more and more)

end group

backup -> client: check if versions of filehasher local and remote are matching.

else Backup

backup -> client: check if lxc id was running, there for start is triggered

else Summary
end group

end group 

local.storage -> backup.storage: copy backup (full or incremental)


== Work-in-Progress: Restore ==

client -> client: calls .backup for restore info
backup -[#Grey]-> client: WIP: restoring 

note left of backup

Work-in-Progress

end note

@enduml

